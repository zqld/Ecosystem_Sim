package org.broker;

import java.awt.*;

public class Predator {
    // Поля класса
    private int x, y;  // Координаты хищника на экране (позиция в мире)
    private int health; // Здоровье хищника

    // Конструктор класса
    public Predator(int x, int y) {
        this.x = x;    // Устанавливаем начальную координату хищника по оси X
        this.y = y;    // Устанавливаем начальную координату хищника по оси Y
        this.health = 100;  // Задаем начальное значение здоровья хищника
    }

    // Метод для обновления состояния хищника
    public void update() {
        // Хищник двигается в случайном направлении
        // Плавно изменяем координаты хищника на случайное значение (1 или -1)
        x += Math.random() > 0.5 ? 1 : -1;  // Изменение координаты по X
        y += Math.random() > 0.5 ? 1 : -1;  // Изменение координаты по Y
        // Если хищник встретится с травоядным, то будет взаимодействовать (съедать его)
    }

    // Метод для взаимодействия хищника с травоядным
    public void interact(Herbivore herbivore) {
        // Проверяем, находится ли травоядное в пределах 2-х клеток по осям X и Y
        if (Math.abs(x - herbivore.getX()) < 2 && Math.abs(y - herbivore.getY()) < 2) {
            // Если хищник на близком расстоянии от травоядного, хищник "съедает" его
            System.out.println("Хищник на позиции (" + x + ", " + y + ") съел травоядное на позиции (" + herbivore.getX() + ", " + herbivore.getY() + ")");

            // Уменьшаем здоровье травоядного, чтобы показать, что оно было съедено
            // В методе update() травоядного можно уменьшать его здоровье или удалить его
            herbivore.update();  // Метод обновления травоядного (уменьшение здоровья)
        }
    }

    // Метод для отображения хищника на экране
    public void draw(Graphics g) {
        g.setColor(Color.RED); // Устанавливаем цвет для хищника (красный)
        g.fillRect(x * 10, y * 10, 10, 10); // Рисуем хищника как красный квадрат (масштабируется на 10x10 пикселей)
    }

    // Метод для проверки жив ли хищник
    public boolean isAlive() {
        // Хищник считается живым, если его здоровье больше 0
        return health > 0;
    }

    // Геттеры для получения координат хищника
    public int getX() {
        return x;  // Возвращаем текущую координату X
    }

    public int getY() {
        return y;  // Возвращаем текущую координату Y
    }
}

